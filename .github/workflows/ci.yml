name: publish
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
  NuGetSource: "https://api.nuget.org/v3/index.json"

defaults:
  run:
    shell: pwsh

jobs:
  lint_csharp:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET Core (global.json)
      uses: actions/setup-dotnet@v1

    - name: Add dotnet-format problem matcher
      uses: xt0rted/dotnet-format-problem-matcher@v1

    - name: Run dotnet format
      run: |
        dotnet tool restore
        dotnet format --check --verbosity:diagnostic Meziantou.Framework.sln

  create_nuget:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core (global.json)
      uses: actions/setup-dotnet@v1
    - name: Setup .NET Core (5.0)
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - name: Setup .NET Core (3.1)
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - run: dotnet pack build.proj --configuration Release --output ${{ env.NuGetDirectory }} /bl
    - name: Run dotnet validate
      run: |
        dotnet tool restore

        Write-Host "Searching nupkg in folder: ${{ env.NuGetDirectory }}"
        $files = Get-ChildItem "${{ env.NuGetDirectory }}/*" -Include *.nupkg
        foreach($file in $files) {
            dotnet validate package local "$file"
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Invalid package $file"
            }
        }
    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 3
        path: ${{ env.NuGetDirectory }}/**/*
    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: binlog
        if-no-files-found: error
        retention-days: 3
        path: '**/*.binlog'

  build_and_test:
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: 30
    env:
      TestResultsDirectory: ${{ github.workspace}}/TestResults
    strategy:
      matrix:
        include:
        - runs-on: windows-2019
          configuration: Debug
        - runs-on: windows-2019
          configuration: Release
        - runs-on: 'ubuntu-20.04'
          configuration: Debug
        - runs-on: 'ubuntu-20.04'
          configuration: Release
        - runs-on: 'macos-10.15'
          configuration: Debug
        - runs-on: 'macos-10.15'
          configuration: Release
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core (global.json)
      uses: actions/setup-dotnet@v1
    - name: Setup .NET Core (5.0)
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - name: Setup .NET Core (3.1)
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - run: dotnet build build.proj --configuration ${{ matrix.configuration }} /p:UseSourceLink=false /bl
      name: Build
    - run: dotnet test build.proj  --configuration ${{ matrix.configuration }} /p:UseSourceLink=false --no-build --logger trx --logger "GitHubActions;report-warnings=false" --results-directory "${{ env.TestResultsDirectory }}" --collect:"XPlat Code Coverage" --blame-hang --blame-hang-timeout 2min -- xunit.parallelizeAssembly=false
      name: Run tests
    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-results-${{ matrix.runs-on }}-${{ matrix.configuration }}
        if-no-files-found: error
        retention-days: 3
        path: ${{ env.TestResultsDirectory }}/**/*

  deploy:
    runs-on: 'ubuntu-20.04'
    needs: [ lint_csharp, create_nuget, build_and_test ]
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: nuget
        path: ${{ env.NuGetDirectory }}
    - name: Setup .NET Core (global.json)
      uses: actions/setup-dotnet@v1
    - run: |
        Write-Host "Current ref: $env:GITHUB_REF"
        Write-Host "Searching nupkg in folder: ${{ env.NuGetDirectory }}"
        $files = Get-ChildItem "${{ env.NuGetDirectory }}/*" -Include *.nupkg
        foreach($file in $files) {
            Write-Host "Pushing NuGet package: $($file.FullName)"
            if ($env:GITHUB_REF -eq 'refs/heads/main')
            {
              & dotnet nuget push "$($file.FullName)" --api-key "$env:NuGetApiKey" --source ${{ env.NuGetSource }} --force-english-output --skip-duplicate
            }
            else
            {
              Write-Host "Not on the default branch => Do not push"
            }
        }
      name: Publish NuGet packages
      if: always()
      env:
        NuGetApiKey: ${{ secrets.NuGetApiKey }}
