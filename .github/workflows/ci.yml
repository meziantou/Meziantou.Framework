name: publish
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
  NuGetSource: "https://api.nuget.org/v3/index.json"

defaults:
  run:
    shell: pwsh

jobs:
  validate_readme:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v3
      - name: Validate Readme
        run: .\eng\update-readme.ps1

  create_nuget:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core (global.json)
        uses: actions/setup-dotnet@v2
      - run: dotnet build eng/build.proj --configuration Release /bl
      - run: dotnet pack eng/build.proj --configuration Release --output ${{ env.NuGetDirectory }} /bl
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 3
          path: ${{ env.NuGetDirectory }}/**/*
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: binlog
          if-no-files-found: error
          retention-days: 3
          path: '**/*.binlog'

  validate_nuget:
    runs-on: windows-2022
    needs: [ create_nuget ]
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core (global.json)
        uses: actions/setup-dotnet@v2
      - name: Setup .NET Core (additional versions)
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: |
            6.0.x
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
      - name: Run dotnet validate
        run: |
          dotnet tool restore

          $files = Get-ChildItem "${{ env.NuGetDirectory }}/*" -Include *.nupkg
          foreach($file in $files) {
              dotnet validate package local "$file"
          }

  build_and_test:
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: 30
    env:
      TestResultsDirectory: ${{ github.workspace}}/TestResults
    strategy:
      matrix:
        runs-on: [ windows-2019, windows-2022, ubuntu-18.04, ubuntu-20.04, ubuntu-22.04, macos-10.15, macos-11, macos-12 ]
        configuration: [ Debug, Release ]
        additionalArguments: [ "", "/p:InvariantGlobalization=true" ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core (global.json)
        uses: actions/setup-dotnet@v2
      - name: Setup .NET Core (additional versions)
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: |
            6.0.x
            5.0.x
            3.1.x
      - run: dotnet build eng/build.proj --configuration ${{ matrix.configuration }} /bl ${{ matrix.additionalArguments }}
        name: Build
      - run: dotnet test eng/build.proj  --configuration ${{ matrix.configuration }} --no-build --logger trx --logger "GitHubActions;report-warnings=false" --results-directory "${{ env.TestResultsDirectory }}" --collect:"XPlat Code Coverage" --blame-hang --blame-hang-timeout 2min ${{ matrix.additionalArguments }}
        name: Run tests
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.runs-on }}-${{ matrix.configuration }}
          if-no-files-found: error
          retention-days: 3
          path: ${{ env.TestResultsDirectory }}/**/*
      - uses: codecov/codecov-action@v3
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: github.actor != 'dependabot[bot]' && (success() || failure()) # the step doesn't work for dependabot
        with:
          name: test-results-${{ matrix.runs-on }}-${{ matrix.configuration }}
          path: ${{ env.TestResultsDirectory }}/**/*.trx
          path-replace-backslashes: 'true'
          reporter: dotnet-trx

  test_trimming:  
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      matrix:
        # https://docs.microsoft.com/en-us/dotnet/core/rid-catalog
        runtime: [ "win-x64", "win-x86", "linux-x64", "osx-x64" ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core (global.json)
        uses: actions/setup-dotnet@v2
      - run: dotnet publish --configuration Release --runtime ${{ matrix.runtime }} --self-contained Samples/Trimmable/Trimmable.csproj

  test_trimming_wpf:
    runs-on: windows-2022
    timeout-minutes: 30
    strategy:
      matrix:
        runtime: [ "win-x64", "win-x86" ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core (global.json)
        uses: actions/setup-dotnet@v2
      - run: dotnet publish --configuration Release --runtime ${{ matrix.runtime }} --self-contained Samples/Trimmable.Wpf/Trimmable.Wpf.csproj
      
  deploy:
    runs-on: 'ubuntu-20.04'
    needs: [ validate_readme, validate_nuget, build_and_test, test_trimming, test_trimming_wpf ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
      - name: Setup .NET Core (global.json)
        uses: actions/setup-dotnet@v2
      - run: |
          Write-Host "Current ref: $env:GITHUB_REF"
          Write-Host "Searching nupkg in folder: ${{ env.NuGetDirectory }}"
          $files = Get-ChildItem "${{ env.NuGetDirectory }}/*" -Include *.nupkg
          foreach($file in $files) {
              Write-Host "Pushing NuGet package: $($file.FullName)"
              if ($env:GITHUB_REF -eq 'refs/heads/main')
              {
                & dotnet nuget push "$($file.FullName)" --api-key "$env:NuGetApiKey" --source ${{ env.NuGetSource }} --force-english-output --skip-duplicate
              }
              else
              {
                Write-Host "Not on the default branch => Do not push"
              }
          }
        name: Publish NuGet packages
        if: always()
        env:
          NuGetApiKey: ${{ secrets.NuGetApiKey }}
