@page "/generic-form"

<h1>Generic Form!</h1>

<EditForm Model="MyModel">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <GenericForm @bind-Model="MyModel" EditorClass="form-control" EnableFieldValidation="false">
        <FieldTemplate Context="field">
            <div class="form-group">
                <label for="@field.EditorId">@field.DisplayName</label>
                @field.EditorTemplate
                @field.FieldValidationTemplate
            </div>
        </FieldTemplate>
    </GenericForm>
</EditForm>

<button type="button" @onclick="() => StateHasChanged()">Refresh</button>

<div>
    @MyModel
</div>

@code {
    public Model MyModel { get; set; } = new Model();

    public record Model
    {
        
        [System.ComponentModel.Editor(typeof(InputCustomEditorSelect<Customer>), typeof(Microsoft.AspNetCore.Components.Forms.InputBase<>))]
        [System.ComponentModel.DataAnnotations.Display(Name = "CustomerList generated static method GetEditorList", Order=3)]
        public Customer Customer { get; set; } = new() { Name = "Github", CustomerID = 3 };

        [System.ComponentModel.DataAnnotations.MinLength(3)]
        [System.ComponentModel.DataAnnotations.Display(Name = "String Value with custom name",Order=1)]
        public string StringValue { get; set; } = "meziantou";
        [System.ComponentModel.DataAnnotations.Display(Order=2)]
        [System.ComponentModel.DisplayName("Custom name")]
        public string StringValueWithCustomName { get; set; } = "Gérald Barré";

        [System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Date)]
        public DateTime DateValue { get; set; } = DateTime.Now;
        public DateTime DateTimeValue { get; set; } = DateTime.Now;
        [System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Date)]
        public DateTimeOffset DateOffsetValue { get; set; } = DateTimeOffset.Now;
        public DateTimeOffset DateTimeOffsetValue { get; set; } = DateTimeOffset.Now;
        public bool BooleanValue { get; set; }
        public short Int16Value { get; set; }
        public int Int32Value { get; set; }
        public long Int64Value { get; set; }
        public float SingleValue { get; set; }
        public double DoubleValue { get; set; }
        public decimal DecimalValue { get; set; }

        [System.ComponentModel.Editor(typeof(GenericFormDemoCustomEditor), typeof(Microsoft.AspNetCore.Components.Forms.InputBase<>))]
        public string Choice { get; set; }

        // This is not visible in the form
        public string ReadOnly { get; }

        // This is not visible in the form
        [System.ComponentModel.DataAnnotations.Editable(false)]
        public string NotEditable { get; }

        [System.ComponentModel.Editor(typeof(InputTextArea), typeof(Microsoft.AspNetCore.Components.Forms.InputBase<>))]
        public string TextArea { get; set; }

        [System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.EmailAddress)]
        public string Email { get; set; }

        [System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
        public string Password { get; set; }

        [System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.MultilineText)]
        public string MultilineText { get; set; }

        [System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.PhoneNumber)]
        public string PhoneNumber { get; set; }

        [System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Url)]
        public string Url { get; set; }

        public Uri Uri { get; set; }
    }

    public class Customer 
    {
        [System.ComponentModel.DataAnnotations.Key]
        public int CustomerID { get; set; } = 3; //The Property with [Key]-Attribute is used as value in <select>

        public string Name { get; set; } = "Github"; // The Property Name is used as <SELECT> Displayname

        public override string ToString()
        {
            return $"Name:{Name} ID:{CustomerID}";
        }

        public static List<Customer> GetEditorList()
        {
            System.Collections.Generic.List<Customer> l = new();
            l.Add(new() { CustomerID = 1, Name = "Azure" });
            l.Add(new() { CustomerID = 2, Name = "SourceForge" });
            l.Add(new() { CustomerID = 3, Name = "Github" });
            l.Add(new() { CustomerID = 4, Name = "BitBucket" });
            return l;
        }
    }
}