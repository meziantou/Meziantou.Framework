# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#use-a-microsoft-hosted-agent
pool:
  vmImage: 'windows-2019'

trigger:
- '*'

pr:
  autoCancel: false
  #drafts: true
  branches:
    include:
    - '*'

variables:
  solution: Meziantou.Framework.sln
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_VERSION: '5.0.100-rc.2.20479.15'

stages:
- stage: build
  jobs:
  - job: "lint_csharp"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: $(DOTNET_VERSION)

    - task: DotNetCoreCLI@2
      displayName: 'Install dotnet format'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'update -g dotnet-format'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet format'
      inputs:
        command: 'custom'
        custom: 'format'
        arguments: '--check -v:normal'

  - job: "build_windows"
    strategy:
      matrix:
        Debug:
          BuildConfiguration: 'Debug'
        Release:
          BuildConfiguration: 'Release'
    pool:
      vmImage: windows-2019
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: $(DOTNET_VERSION)

    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: test
        arguments: '--configuration $(BuildConfiguration)'
        projects: 'tests/**/*Tests.csproj'
        nobuild: true

  - job: "build_linux"
    strategy:
      matrix:
        Debug:
          BuildConfiguration: 'Debug'
        Release:
          BuildConfiguration: 'Release'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: $(DOTNET_VERSION)

    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: 'build'
        projects: |
          **/*.csproj
          !Samples/**/*.csproj
          !src/Meziantou.Framework.WPF/Meziantou.Framework.WPF.csproj
          !tests/Meziantou.Framework.WPF.Tests/Meziantou.Framework.WPF.Tests.csproj
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: test
        arguments: '--configuration $(BuildConfiguration) --collect "Code coverage"'
        projects: |
          tests/**/*Tests.csproj
          !tests/Meziantou.Framework.Win32.*/*.csproj
          !tests/Meziantou.Framework.WPF.Tests/Meziantou.Framework.WPF.Tests.csproj
        nobuild: true

  - job: "create_nuget"
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: $(DOTNET_VERSION)

    - task: DotNetCoreCLI@2
      displayName: dotnet pack
      inputs:
        command: 'pack'
        packagesToPack: 'src/**/*.csproj'
        configuration: 'Release'
        packDirectory: '$(Build.ArtifactStagingDirectory)'
        versioningScheme: 'off'

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: NuGetPackages

- stage: deploy
  jobs:
  - job: "deploy_nuget"
    pool:
      vmImage: 'windows-2019'
    steps:
    - checkout: none
    - download: current
      artifact: NuGetPackages

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: $(DOTNET_VERSION)

    - task: PowerShell@2
      displayName: Publish NuGet packages
      continueOnError: true
      inputs:
        ignoreLASTEXITCODE: true
        targetType: inline
        pwsh: true
        script: |
          Write-Host "Searching nupkg in folder: $(Pipeline.Workspace)"
          $files = Get-ChildItem $(Pipeline.Workspace)/NuGetPackages/* -Include *.nupkg
          foreach($file in $files) {
              Write-Host "Pushing NuGet package: $($file.FullName)"
              if ($env:Build_SourceBranch -eq 'refs/heads/master')
              {
                # Push both nupkg and snupkg
                & dotnet nuget push "$($file.FullName)" --api-key "$(NuGetApiKey)" --source https://api.nuget.org/v3/index.json --force-english-output --skip-duplicate
              }
              else
              {
                Write-Host "Not on the default branch => Do not push"
              }
          }
