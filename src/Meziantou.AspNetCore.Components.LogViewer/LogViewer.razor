@using System.Globalization
@if (Entries is not null)
{
    <div class="log-viewer">
        @{
            DateTimeOffset startTime = DateTimeOffset.UtcNow;
        }
        @foreach (var (entry, index) in Entries.WithIndex())
        {
            @if(index == 0)
            {
                startTime = entry.Timestamp;

                if (TimestampDisplayFormat is TimestampDisplayFormat.DateTimeThenRelativeTime)
                {
                    <div class="log-entry">
                        <span class="log-timestamp">@FormatDateTime(entry.Timestamp)</span>
                    </div>
                }
            }

            <div class="log-entry @(IsSelected(entry) ? "selected" : "")">
                @if (ShowLineNumbers)
                {
                    <a class="log-linenumber" @onclick="(e) => SelectLine(entry, e.CtrlKey)" @onclick:preventDefault="true">@(index + 1)</a>
                }

                @if (TimestampDisplayFormat is TimestampDisplayFormat.FullDateTime)
                {
                    <span class="log-timestamp">@FormatDateTime(entry.Timestamp)</span>
                }
                else if (TimestampDisplayFormat is TimestampDisplayFormat.DateTimeThenRelativeTime)
                {
                    <span class="log-timestamp">@FormatTimeSpan(entry.Timestamp - startTime)</span>
                }
                else if (TimestampDisplayFormat is TimestampDisplayFormat.RelativeTimeStartingAtZero)
                {
                    if (index == 0)
                    {
                        <span class="log-timestamp">@TimeSpan.Zero</span>
                    }
                    else
                    {
                        <span class="log-timestamp">@FormatTimeSpan(entry.Timestamp - startTime)</span>
                    }
                }

                <span>
                    @if (entry.Data is not null)
                    {
                        <span class="log-toggle-details @(IsOpened(entry) ? "opened" : "")" @onclick="() => ToggleDetails(entry)">▶</span>
                    }

                    <span class="log-message log-@GetLogLevelClassName(entry.LogLevel)">@LogHighlighter.Highlight(entry.Message, LogHighlighters, "mez-logviewer")</span>
                </span>
            </div>
            @if (IsOpened(entry))
            {
                <div class="log-details">
                    <LogEntryDetails Data="entry.Data" />
                </div>
            }
        }
    </div>
}

@code {
    private HashSet<LogEntry> _openedEntries = new HashSet<LogEntry>();
    private HashSet<LogEntry> _selectedEntries = new HashSet<LogEntry>();

    /// <summary>
    /// Gets or sets the collection of log entries to display.
    /// </summary>
    [Parameter]
    public IEnumerable<LogEntry>? Entries { get; set; }

    /// <summary>
    /// Gets or sets the format for displaying timestamps. Default is <see cref="TimestampDisplayFormat.FullDateTime"/>.
    /// </summary>
    [Parameter]
    public TimestampDisplayFormat TimestampDisplayFormat { get; set; } = TimestampDisplayFormat.FullDateTime;

    /// <summary>
    /// Gets or sets the format string for displaying time spans. If not specified, uses the default format "G".
    /// </summary>
    [Parameter]
    public string? TimeSpanStringFormat { get; set; }

    /// <summary>
    /// Gets or sets the format string for displaying date and time values. If not specified, uses the default format "R".
    /// </summary>
    [Parameter]
    public string? DateTimeStringFormat { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether to display line numbers. Default is <c>true</c>.
    /// </summary>
    [Parameter]
    public bool ShowLineNumbers { get; set; } = true;

    /// <summary>
    /// Gets or sets the collection of log highlighters to apply to log messages. Default includes <see cref="UrlLogHighlighter"/>.
    /// </summary>
    [Parameter]
    public IEnumerable<ILogHighlighter> LogHighlighters { get; set; } = new[] { new UrlLogHighlighter() };

    private void SelectLine(LogEntry entry, bool append)
    {
        if (!append)
        {
            _selectedEntries.Clear();
        }

        _selectedEntries.Add(entry);
    }

    private void ToggleDetails(LogEntry entry)
    {
        if (!_openedEntries.Remove(entry))
        {
            _openedEntries.Add(entry);
        }
    }

    private bool IsSelected(LogEntry logEntry) => _selectedEntries.Contains(logEntry);
    private bool IsOpened(LogEntry logEntry) => _openedEntries.Contains(logEntry);

    private string FormatTimeSpan(TimeSpan value)
    {
        return value.ToString(TimeSpanStringFormat ?? "G");
    }
    
    private string FormatDateTime(DateTimeOffset value)
    {
        return value.ToString(DateTimeStringFormat ?? "R");
    }

    private static string GetLogLevelClassName(LogLevel logLevel)
    {
        return logLevel switch
        {
            LogLevel.Trace => "trace",
            LogLevel.Debug => "debug",
            LogLevel.Information => "information",
            LogLevel.Warning => "warning",
            LogLevel.Error => "error",
            LogLevel.Critical => "critical",
            _ => "information",
        };
    }
}