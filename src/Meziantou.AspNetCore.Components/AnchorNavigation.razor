@*
/// <summary>
/// A component that enables anchor-based navigation within a Blazor application.
/// When the URL contains a fragment identifier (e.g., #section1), this component automatically scrolls to the element with that ID.
/// </summary>
/// <remarks>
/// <para>
/// This component handles both standard anchor navigation and text fragments (e.g., #section:~:text=foo).
/// Add this component once to your layout or main page to enable anchor navigation throughout your application.
/// </para>
/// </remarks>
/// <example>
/// <para>Add the component to your layout:</para>
/// <code>
/// &lt;AnchorNavigation /&gt;
/// </code>
/// <para>Then use anchors in your content:</para>
/// <code>
/// &lt;a href="#section1"&gt;Go to Section 1&lt;/a&gt;
/// &lt;div id="section1"&gt;Section 1 Content&lt;/div&gt;
/// </code>
/// </example>
/// <seealso href="https://www.meziantou.net/anchor-navigation-in-a-blazor-application.htm"/>
*@
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@code {
    const string ImportPath = "./_content/Meziantou.AspNetCore.Components/AnchorNavigation.js";
    private Task<IJSObjectReference>? _module;
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", ImportPath).AsTask();

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollToFragment();
    }

    public ValueTask DisposeAsync()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        if (_module != null)
            return DisposeAsyncImpl();
        return ValueTask.CompletedTask;

        async ValueTask DisposeAsyncImpl()
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await ScrollToFragment();
    }

    private async Task ScrollToFragment()
    {
        var uri = new Uri(NavigationManager.Uri, UriKind.Absolute);
        var fragment = uri.Fragment;
        if (fragment.StartsWith('#'))
        {
            // Handle text fragment (https://example.org/#test:~:text=foo)
            // https://github.com/WICG/scroll-to-text-fragment/
            var elementId = fragment.Substring(1);
            var index = elementId.IndexOf(":~:", StringComparison.Ordinal);
            if (index > 0)
            {
                elementId = elementId.Substring(0, index);
            }

            if (!string.IsNullOrEmpty(elementId))
            {
                var module = await Module;
                await module.InvokeVoidAsync("blazorScrollToId", elementId);
            }
        }
    }
}