@typeparam TRowData

@*
/// <summary>
/// A component that displays data in a table with customizable columns.
/// </summary>
/// <typeparam name="TRowData">The type of data for each row.</typeparam>
/// <remarks>
/// <para>
/// This component works with <see cref="DataGridColumn{TRowData}"/> components to define columns.
/// Column definitions should be provided as child content.
/// </para>
/// </remarks>
/// <example>
/// <code>
/// &lt;DataGrid Items="@users" class="table"&gt;
///     &lt;DataGridColumn TRowData="User" Title="Name" Property="@(u => u.Name)" /&gt;
///     &lt;DataGridColumn TRowData="User" Title="Email" Property="@(u => u.Email)" /&gt;
/// &lt;/DataGrid&gt;
/// </code>
/// </example>
*@

@*
    <CascadingValue> allows descendant components (defined in ChildContent) to receive the specified value.
    Child components need to declare a cascading parameter with the same type as "Value" (i.e. Grid<TRowData>).
    This allows GridColumn to get the Grid instance by using a CascadingParameter

        [CascadingParameter]public Grid<TRowData> OwnerGrid { get; set; }

    IsFixed="true" indicates that "Value" will not change. This is a
    performance optimization that allows the framework to skip setting up
    change notifications.
*@
<CascadingValue IsFixed="true" Value="this">@ChildContent</CascadingValue>

<table @attributes="@TableAttributes">
    <thead>
        <tr>
            @foreach (var column in columns)
            {
                @column.HeaderTemplate
            }
        </tr>
    </thead>
    <tbody>
        @{
            if (Items != null)
            {
                var index = 0;
                foreach (var item in Items)
                {
                    @* Use @key to help the diff algorithm when updating the collection *@
                    <tr @key="item.GetHashCode()" class="@(RowClass?.Invoke(item, index++))">
                        @foreach (var column in columns)
                        {
                            @column.CellTemplate(item)
                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>

@code {
    /// <summary>Gets or sets additional attributes to apply to the table element.</summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? TableAttributes { get; set; }

    /// <summary>Gets or sets the collection of items to display in the grid.</summary>
    [Parameter]
    public IEnumerable<TRowData>? Items { get; set; }

    /// <summary>Gets or sets the child content, which should contain <see cref="DataGridColumn{TRowData}"/> components.</summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>Gets or sets a function to determine the CSS class for each row based on the row data and index.</summary>
    [Parameter]
    public Func<TRowData, int, string>? RowClass { get; set; }

    private readonly List<DataGridColumn<TRowData>> columns = new List<DataGridColumn<TRowData>>();

    // GridColumn uses this method to add a column
    internal void AddColumn(DataGridColumn<TRowData> column)
    {
        columns.Add(column);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // The first render will instantiate the GridColumn defined in the ChildContent.
            // GridColumn calls AddColumn during its initialization. This means that until
            // the first render is completed, the columns collection is empty.
            // Calling StateHasChanged() will re-render the component, so the second time it will know the columns
            StateHasChanged();
        }
    }
}