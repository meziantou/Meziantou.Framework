#pragma warning disable RS1041
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Operations;
using Microsoft.CodeAnalysis.Text;

namespace Meziantou.AspNetCore.ServiceDefaults.AutoRegister;

// https://github.com/dotnet/roslyn/blob/main/docs/features/interceptors.md
[Generator]
public sealed class ServiceDefaultsSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var hasType = context.CompilationProvider.Select((compilation, cancellationToken) => compilation.GetTypeByMetadataName("Meziantou.AspNetCore.ServiceDefaults.MeziantouServiceDefaults") is not null);

        var syntax = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (syntaxNode, cancellationToken) => syntaxNode.IsKind(SyntaxKind.InvocationExpression),
                transform: Transform)
            .Where(node => node != null)
            .Collect();

        var combined = syntax.Combine(hasType);

        context.RegisterSourceOutput(combined,
            (spc, source) =>
            {
                var (interceptionData, hasType) = source;
                if (!hasType)
                    return;

                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated/>");
                sb.AppendLine("namespace Meziantou.AspNetCore.ServiceDefaults.AutoRegister;");
                sb.AppendLine("using Meziantou.AspNetCore.ServiceDefaults;");
                sb.AppendLine("file static partial class Interceptors");
                sb.AppendLine("{");

                var index = 0;
                foreach (var method in interceptionData.OrderBy(item => item.OrderKey, StringComparer.Ordinal))
                {
                    if (method.Kind is InterceptionMethodKind.CreateBuilder)
                    {
                        sb.AppendLine($$"""
                                // Intercepted call at {{method.InterceptableLocation.GetDisplayLocation()}}
                                [System.Runtime.CompilerServices.InterceptsLocationAttribute(version: {{method.InterceptableLocation.Version.ToString(CultureInfo.InvariantCulture)}}, data: "{{method.InterceptableLocation.Data}}")]
                                public static Microsoft.AspNetCore.Builder.WebApplicationBuilder Intercept_CreateBuilder{{index.ToString(CultureInfo.InvariantCulture)}}()
                                {
                                    var builder = Microsoft.AspNetCore.Builder.WebApplication.CreateBuilder();
                                    builder.UseMeziantouConventions();
                                    return builder;
                                }
                            """);
                    }
                    else if (method.Kind is InterceptionMethodKind.CreateBuilder_StringArray)
                    {
                        sb.AppendLine($$"""
                                // Intercepted call at {{method.InterceptableLocation.GetDisplayLocation()}}
                                [System.Runtime.CompilerServices.InterceptsLocationAttribute(version: {{method.InterceptableLocation.Version.ToString(CultureInfo.InvariantCulture)}}, data: "{{method.InterceptableLocation.Data}}")]
                                public static Microsoft.AspNetCore.Builder.WebApplicationBuilder Intercept_CreateBuilder{{index.ToString(CultureInfo.InvariantCulture)}}(string[] args)
                                {
                                    var builder = Microsoft.AspNetCore.Builder.WebApplication.CreateBuilder(args);
                                    builder.UseMeziantouConventions();
                                    return builder;
                                }
                            """);
                    }
                    else if (method.Kind is InterceptionMethodKind.CreateBuilderSlim)
                    {
                        sb.AppendLine($$"""
                                // Intercepted call at {{method.InterceptableLocation.GetDisplayLocation()}}
                                [System.Runtime.CompilerServices.InterceptsLocationAttribute(version: {{method.InterceptableLocation.Version.ToString(CultureInfo.InvariantCulture)}}, data: "{{method.InterceptableLocation.Data}}")]
                                public static Microsoft.AspNetCore.Builder.WebApplicationBuilder Intercept_CreateBuilderSlim{{index.ToString(CultureInfo.InvariantCulture)}}()
                                {
                                    var builder = Microsoft.AspNetCore.Builder.WebApplication.CreateBuilderSlim();
                                    builder.UseMeziantouConventions();
                                    return builder;
                                }
                            """);
                    }
                    else if (method.Kind is InterceptionMethodKind.CreateBuilderSlim_StringArray)
                    {
                        sb.AppendLine($$"""
                                // Intercepted call at {{method.InterceptableLocation.GetDisplayLocation()}}
                                [System.Runtime.CompilerServices.InterceptsLocationAttribute(version: {{method.InterceptableLocation.Version.ToString(CultureInfo.InvariantCulture)}}, data: "{{method.InterceptableLocation.Data}}")]
                                public static Microsoft.AspNetCore.Builder.WebApplicationBuilder Intercept_CreateBuilderSlim{{index.ToString(CultureInfo.InvariantCulture)}}(string[] args)
                                {
                                    var builder = Microsoft.AspNetCore.Builder.WebApplication.CreateBuilderSlim(args);
                                    builder.UseMeziantouConventions();
                                    return builder;
                                }
                            """);
                    }
                    else if (method.Kind is InterceptionMethodKind.Build)
                    {
                        sb.AppendLine($$"""
                                // Intercepted call at {{method.InterceptableLocation.GetDisplayLocation()}}
                                [System.Runtime.CompilerServices.InterceptsLocationAttribute(version: {{method.InterceptableLocation.Version.ToString(CultureInfo.InvariantCulture)}}, data: "{{method.InterceptableLocation.Data}}")]
                                public static Microsoft.AspNetCore.Builder.WebApplication Intercept_Build{{index.ToString(CultureInfo.InvariantCulture)}}(this Microsoft.AspNetCore.Builder.WebApplicationBuilder builder)
                                {
                                    var app = builder.Build();
                                    app.MapMeziantouDefaultEndpoints();
                                    return app;
                                }
                            """);
                    }

                    index++;
                }

                sb.AppendLine("}");
                spc.AddSource("Intercepts.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
            });

        context.RegisterPostInitializationOutput(context =>
        {
            context.AddSource("Microsoft.CodeAnalysis.EmbeddedAttribute", SourceText.From(""""
                // <auto-generated/>
                #pragma warning disable
                namespace Microsoft.CodeAnalysis
                {
                    internal sealed partial class EmbeddedAttribute : global::System.Attribute
                    {
                    }
                }
                """", encoding: Encoding.UTF8));

            context.AddSource("InterceptsLocationAttribute.g.cs", SourceText.From("""
                // <auto-generated/>
                #pragma warning disable                
                namespace System.Runtime.CompilerServices
                {
                    [Microsoft.CodeAnalysis.Embedded]
                    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                    public sealed class InterceptsLocationAttribute(int version, string data) : Attribute
                    {
                    }
                }
                """, encoding: Encoding.UTF8));
        });


        static InterceptionData? Transform(GeneratorSyntaxContext context, CancellationToken cancellationToken)
        {
            var invocation = context.SemanticModel.GetOperation(context.Node, cancellationToken) as IInvocationOperation;
            if (invocation is null)
                return null;

            static string CreateOrderKey(SyntaxNode node)
            {
                var lineSpan = node.GetLocation().GetLineSpan();
                return node.SyntaxTree.FilePath + ":" + lineSpan.StartLinePosition.Line + ":" + lineSpan.StartLinePosition.Character;
            }

            if (invocation.TargetMethod.Name is "CreateBuilder" && invocation.TargetMethod.Parameters.Length is 0 && SymbolEqualityComparer.Default.Equals(invocation.TargetMethod.ContainingType, context.SemanticModel.Compilation.GetTypeByMetadataName("Microsoft.AspNetCore.Builder.WebApplication")))
            {
                return new InterceptionData
                {
                    OrderKey = CreateOrderKey(context.Node),
                    Kind = InterceptionMethodKind.CreateBuilder,
                    InterceptableLocation = context.SemanticModel.GetInterceptableLocation((InvocationExpressionSyntax)context.Node, cancellationToken),
                };
            }

            if (invocation.TargetMethod.Name is "CreateBuilderSlim" && invocation.TargetMethod.Parameters.Length is 0 && SymbolEqualityComparer.Default.Equals(invocation.TargetMethod.ContainingType, context.SemanticModel.Compilation.GetTypeByMetadataName("Microsoft.AspNetCore.Builder.WebApplication")))
            {
                return new InterceptionData
                {
                    OrderKey = CreateOrderKey(context.Node),
                    Kind = InterceptionMethodKind.CreateBuilderSlim,
                    InterceptableLocation = context.SemanticModel.GetInterceptableLocation((InvocationExpressionSyntax)context.Node, cancellationToken),
                };
            }

            if (invocation.TargetMethod.Name is "CreateBuilder" && invocation.TargetMethod.Parameters.Length is 1 && invocation.TargetMethod.Parameters[0].Type is IArrayTypeSymbol { ElementType.SpecialType: SpecialType.System_String } && SymbolEqualityComparer.Default.Equals(invocation.TargetMethod.ContainingType, context.SemanticModel.Compilation.GetTypeByMetadataName("Microsoft.AspNetCore.Builder.WebApplication")))
            {
                return new InterceptionData
                {
                    OrderKey = CreateOrderKey(context.Node),
                    Kind = InterceptionMethodKind.CreateBuilder_StringArray,
                    InterceptableLocation = context.SemanticModel.GetInterceptableLocation((InvocationExpressionSyntax)context.Node, cancellationToken),
                };
            }

            if (invocation.TargetMethod.Name is "CreateBuilderSlim" && invocation.TargetMethod.Parameters.Length is 1 && invocation.TargetMethod.Parameters[0].Type is IArrayTypeSymbol { ElementType.SpecialType: SpecialType.System_String } && SymbolEqualityComparer.Default.Equals(invocation.TargetMethod.ContainingType, context.SemanticModel.Compilation.GetTypeByMetadataName("Microsoft.AspNetCore.Builder.WebApplication")))
            {
                return new InterceptionData
                {
                    OrderKey = CreateOrderKey(context.Node),
                    Kind = InterceptionMethodKind.CreateBuilderSlim_StringArray,
                    InterceptableLocation = context.SemanticModel.GetInterceptableLocation((InvocationExpressionSyntax)context.Node, cancellationToken),
                };
            }

            if (invocation.TargetMethod.Name is "Build" && SymbolEqualityComparer.Default.Equals(invocation.TargetMethod.ContainingType, context.SemanticModel.Compilation.GetTypeByMetadataName("Microsoft.AspNetCore.Builder.WebApplicationBuilder")))
            {
                return new InterceptionData
                {
                    OrderKey = CreateOrderKey(context.Node),
                    Kind = InterceptionMethodKind.Build,
                    InterceptableLocation = context.SemanticModel.GetInterceptableLocation((InvocationExpressionSyntax)context.Node, cancellationToken),
                };
            }

            return null;

        }
    }
}
