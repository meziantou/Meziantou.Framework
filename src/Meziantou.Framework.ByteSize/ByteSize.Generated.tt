<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#
    var units = new[] {
        new { Name = "Byte", Description = "byte", NumericValue = "1 byte" },
        new { Name = "KiloByte", Description = "kilobyte", NumericValue = "1,000 bytes" },
        new { Name = "MegaByte", Description = "megabyte", NumericValue = "1,000,000 bytes" },
        new { Name = "GigaByte", Description = "gigabyte", NumericValue = "1,000,000,000 bytes" },
        new { Name = "TeraByte", Description = "terabyte", NumericValue = "1,000,000,000,000 bytes" },
        new { Name = "PetaByte", Description = "petabyte", NumericValue = "1,000,000,000,000,000 bytes" },
        new { Name = "ExaByte", Description = "exabyte", NumericValue = "1,000,000,000,000,000,000 bytes" },
        new { Name = "KibiByte", Description = "kibibyte", NumericValue = "1,024 bytes" },
        new { Name = "MebiByte", Description = "mebibyte", NumericValue = "1,048,576 bytes" },
        new { Name = "GibiByte", Description = "gibibyte", NumericValue = "1,073,741,824 bytes" },
        new { Name = "TebiByte", Description = "tebibyte", NumericValue = "1,099,511,627,776 bytes" },
        new { Name = "PebiByte", Description = "pebibyte", NumericValue = "1,125,899,906,842,624 bytes" },
        new { Name = "ExbiByte", Description = "exbibyte", NumericValue = "1,152,921,504,606,846,976 bytes" },
    };
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Meziantou.Framework
{
    partial struct ByteSize
    {
<# foreach (var unit in units) { #>
        /// <summary>Creates a <see cref="ByteSize"/> instance from a <#= unit.Description #> value.</summary>
        /// <param name="value">The number of <#= unit.Description #>s (<#= unit.NumericValue #>).</param>
        /// <returns>A <see cref="ByteSize"/> instance representing the specified number of <#= unit.Description #>s.</returns>
        public static ByteSize From<#= unit.Name #>s(byte value) => new ByteSize((long)value * (long)ByteSizeUnit.<#= unit.Name #>);

        /// <summary>Creates a <see cref="ByteSize"/> instance from a <#= unit.Description #> value.</summary>
        /// <param name="value">The number of <#= unit.Description #>s (<#= unit.NumericValue #>).</param>
        /// <returns>A <see cref="ByteSize"/> instance representing the specified number of <#= unit.Description #>s.</returns>
        public static ByteSize From<#= unit.Name #>s(short value) => new ByteSize((long)value * (long)ByteSizeUnit.<#= unit.Name #>);

        /// <summary>Creates a <see cref="ByteSize"/> instance from a <#= unit.Description #> value.</summary>
        /// <param name="value">The number of <#= unit.Description #>s (<#= unit.NumericValue #>).</param>
        /// <returns>A <see cref="ByteSize"/> instance representing the specified number of <#= unit.Description #>s.</returns>
        public static ByteSize From<#= unit.Name #>s(int value) => new ByteSize((long)value * (long)ByteSizeUnit.<#= unit.Name #>);

        /// <summary>Creates a <see cref="ByteSize"/> instance from a <#= unit.Description #> value.</summary>
        /// <param name="value">The number of <#= unit.Description #>s (<#= unit.NumericValue #>).</param>
        /// <returns>A <see cref="ByteSize"/> instance representing the specified number of <#= unit.Description #>s.</returns>
        public static ByteSize From<#= unit.Name #>s(long value) => new ByteSize((long)value * (long)ByteSizeUnit.<#= unit.Name #>);

        /// <summary>Creates a <see cref="ByteSize"/> instance from a <#= unit.Description #> value.</summary>
        /// <param name="value">The number of <#= unit.Description #>s (<#= unit.NumericValue #>).</param>
        /// <returns>A <see cref="ByteSize"/> instance representing the specified number of <#= unit.Description #>s.</returns>
        public static ByteSize From<#= unit.Name #>s(float value) => new ByteSize((long)(value * (long)ByteSizeUnit.<#= unit.Name #>));

        /// <summary>Creates a <see cref="ByteSize"/> instance from a <#= unit.Description #> value.</summary>
        /// <param name="value">The number of <#= unit.Description #>s (<#= unit.NumericValue #>).</param>
        /// <returns>A <see cref="ByteSize"/> instance representing the specified number of <#= unit.Description #>s.</returns>
        public static ByteSize From<#= unit.Name #>s(double value) => new ByteSize((long)(value * (long)ByteSizeUnit.<#= unit.Name #>));
<# } #>
    }
}
