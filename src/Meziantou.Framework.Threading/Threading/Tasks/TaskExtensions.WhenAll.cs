//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GitVersion
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable MA0042 // Do not use blocking call
#nullable enable

using System.Runtime.CompilerServices;

namespace Meziantou.Framework.Threading.Tasks;

// https://www.meziantou.net/get-the-result-of-multiple-tasks-in-a-valuetuple-and-whenall.htm
public static partial class TaskExtensions
{
    public static TaskAwaiter<T1> GetAwaiter<T1>(this ValueTuple<Task<T1>> tasks) => tasks.Item1.GetAwaiter();
    public static TupleTaskAwaiter<T1, T2> GetAwaiter<T1, T2>(this ValueTuple<Task<T1>, Task<T2>> tasks) => new(tasks);
    public static TupleTaskAwaiter<T1, T2, T3> GetAwaiter<T1, T2, T3>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>> tasks) => new(tasks);
    public static TupleTaskAwaiter<T1, T2, T3, T4> GetAwaiter<T1, T2, T3, T4>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>> tasks) => new(tasks);
    public static TupleTaskAwaiter<T1, T2, T3, T4, T5> GetAwaiter<T1, T2, T3, T4, T5>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>> tasks) => new(tasks);
    public static TupleTaskAwaiter<T1, T2, T3, T4, T5, T6> GetAwaiter<T1, T2, T3, T4, T5, T6>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>> tasks) => new(tasks);
    public static TupleTaskAwaiter<T1, T2, T3, T4, T5, T6, T7> GetAwaiter<T1, T2, T3, T4, T5, T6, T7>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>> tasks) => new(tasks);

    public static ConfiguredTaskAwaitable<T1> ConfigureAwait<T1>(this ValueTuple<Task<T1>> tasks, bool continueOnCapturedContext) => tasks.Item1.ConfigureAwait(continueOnCapturedContext);
    public static ConfiguredTaskAwaitable<T1> ConfigureAwait<T1>(this ValueTuple<Task<T1>> tasks, ConfigureAwaitOptions options) => tasks.Item1.ConfigureAwait(options);
    public static TupleConfiguredTaskAwaitable<T1, T2> ConfigureAwait<T1, T2>(this ValueTuple<Task<T1>, Task<T2>> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable<T1, T2> ConfigureAwait<T1, T2>(this ValueTuple<Task<T1>, Task<T2>> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static TupleConfiguredTaskAwaitable<T1, T2, T3> ConfigureAwait<T1, T2, T3>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable<T1, T2, T3> ConfigureAwait<T1, T2, T3>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static TupleConfiguredTaskAwaitable<T1, T2, T3, T4> ConfigureAwait<T1, T2, T3, T4>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable<T1, T2, T3, T4> ConfigureAwait<T1, T2, T3, T4>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static TupleConfiguredTaskAwaitable<T1, T2, T3, T4, T5> ConfigureAwait<T1, T2, T3, T4, T5>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable<T1, T2, T3, T4, T5> ConfigureAwait<T1, T2, T3, T4, T5>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static TupleConfiguredTaskAwaitable<T1, T2, T3, T4, T5, T6> ConfigureAwait<T1, T2, T3, T4, T5, T6>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable<T1, T2, T3, T4, T5, T6> ConfigureAwait<T1, T2, T3, T4, T5, T6>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static TupleConfiguredTaskAwaitable<T1, T2, T3, T4, T5, T6, T7> ConfigureAwait<T1, T2, T3, T4, T5, T6, T7>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable<T1, T2, T3, T4, T5, T6, T7> ConfigureAwait<T1, T2, T3, T4, T5, T6, T7>(this ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>> tasks, ConfigureAwaitOptions options) => new(tasks, options);

    public static TaskAwaiter GetAwaiter(this ValueTuple<Task> tasks) => tasks.Item1.GetAwaiter();
    public static ConfiguredTaskAwaitable ConfigureAwait(this ValueTuple<Task> tasks, bool continueOnCapturedContext) => tasks.Item1.ConfigureAwait(continueOnCapturedContext);
    public static ConfiguredTaskAwaitable ConfigureAwait(this ValueTuple<Task> tasks, ConfigureAwaitOptions options) => tasks.Item1.ConfigureAwait(options);
    public static TaskAwaiter GetAwaiter(this ValueTuple<Task, Task> tasks) => Task.WhenAll(tasks.Item1, tasks.Item2).GetAwaiter();
    public static TupleConfiguredTaskAwaitable2 ConfigureAwait(this ValueTuple<Task, Task> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable2 ConfigureAwait(this ValueTuple<Task, Task> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static TaskAwaiter GetAwaiter(this ValueTuple<Task, Task, Task> tasks) => Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3).GetAwaiter();
    public static TupleConfiguredTaskAwaitable3 ConfigureAwait(this ValueTuple<Task, Task, Task> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable3 ConfigureAwait(this ValueTuple<Task, Task, Task> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static TaskAwaiter GetAwaiter(this ValueTuple<Task, Task, Task, Task> tasks) => Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4).GetAwaiter();
    public static TupleConfiguredTaskAwaitable4 ConfigureAwait(this ValueTuple<Task, Task, Task, Task> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable4 ConfigureAwait(this ValueTuple<Task, Task, Task, Task> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static TaskAwaiter GetAwaiter(this ValueTuple<Task, Task, Task, Task, Task> tasks) => Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5).GetAwaiter();
    public static TupleConfiguredTaskAwaitable5 ConfigureAwait(this ValueTuple<Task, Task, Task, Task, Task> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable5 ConfigureAwait(this ValueTuple<Task, Task, Task, Task, Task> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static TaskAwaiter GetAwaiter(this ValueTuple<Task, Task, Task, Task, Task, Task> tasks) => Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6).GetAwaiter();
    public static TupleConfiguredTaskAwaitable6 ConfigureAwait(this ValueTuple<Task, Task, Task, Task, Task, Task> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable6 ConfigureAwait(this ValueTuple<Task, Task, Task, Task, Task, Task> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static TaskAwaiter GetAwaiter(this ValueTuple<Task, Task, Task, Task, Task, Task, Task> tasks) => Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6, tasks.Item7).GetAwaiter();
    public static TupleConfiguredTaskAwaitable7 ConfigureAwait(this ValueTuple<Task, Task, Task, Task, Task, Task, Task> tasks, bool continueOnCapturedContext) => new(tasks, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
    public static TupleConfiguredTaskAwaitable7 ConfigureAwait(this ValueTuple<Task, Task, Task, Task, Task, Task, Task> tasks, ConfigureAwaitOptions options) => new(tasks, options);
    public static async ValueTask<ValueTuple<T1>> WhenAll<T1>(ValueTask<T1> task1)
    {
        List<Exception>? observedExceptions = null;
        T1 result1;
        try
        {
            result1 = await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result1);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }

        return new(result1);
    }

    public static ValueTaskAwaiter<ValueTuple<T1>> GetAwaiter<T1>(this ValueTuple<ValueTask<T1>> tasks) => WhenAll(tasks.Item1).GetAwaiter();
    public static async ValueTask<ValueTuple<T1, T2>> WhenAll<T1, T2>(ValueTask<T1> task1, ValueTask<T2> task2)
    {
        List<Exception>? observedExceptions = null;
        T1 result1;
        try
        {
            result1 = await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result1);
        }
        T2 result2;
        try
        {
            result2 = await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result2);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }

        return new(result1, result2);
    }

    public static ValueTaskAwaiter<ValueTuple<T1, T2>> GetAwaiter<T1, T2>(this ValueTuple<ValueTask<T1>, ValueTask<T2>> tasks) => WhenAll(tasks.Item1, tasks.Item2).GetAwaiter();
    public static async ValueTask<ValueTuple<T1, T2, T3>> WhenAll<T1, T2, T3>(ValueTask<T1> task1, ValueTask<T2> task2, ValueTask<T3> task3)
    {
        List<Exception>? observedExceptions = null;
        T1 result1;
        try
        {
            result1 = await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result1);
        }
        T2 result2;
        try
        {
            result2 = await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result2);
        }
        T3 result3;
        try
        {
            result3 = await task3.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result3);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }

        return new(result1, result2, result3);
    }

    public static ValueTaskAwaiter<ValueTuple<T1, T2, T3>> GetAwaiter<T1, T2, T3>(this ValueTuple<ValueTask<T1>, ValueTask<T2>, ValueTask<T3>> tasks) => WhenAll(tasks.Item1, tasks.Item2, tasks.Item3).GetAwaiter();
    public static async ValueTask<ValueTuple<T1, T2, T3, T4>> WhenAll<T1, T2, T3, T4>(ValueTask<T1> task1, ValueTask<T2> task2, ValueTask<T3> task3, ValueTask<T4> task4)
    {
        List<Exception>? observedExceptions = null;
        T1 result1;
        try
        {
            result1 = await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result1);
        }
        T2 result2;
        try
        {
            result2 = await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result2);
        }
        T3 result3;
        try
        {
            result3 = await task3.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result3);
        }
        T4 result4;
        try
        {
            result4 = await task4.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result4);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }

        return new(result1, result2, result3, result4);
    }

    public static ValueTaskAwaiter<ValueTuple<T1, T2, T3, T4>> GetAwaiter<T1, T2, T3, T4>(this ValueTuple<ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>> tasks) => WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4).GetAwaiter();
    public static async ValueTask<ValueTuple<T1, T2, T3, T4, T5>> WhenAll<T1, T2, T3, T4, T5>(ValueTask<T1> task1, ValueTask<T2> task2, ValueTask<T3> task3, ValueTask<T4> task4, ValueTask<T5> task5)
    {
        List<Exception>? observedExceptions = null;
        T1 result1;
        try
        {
            result1 = await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result1);
        }
        T2 result2;
        try
        {
            result2 = await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result2);
        }
        T3 result3;
        try
        {
            result3 = await task3.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result3);
        }
        T4 result4;
        try
        {
            result4 = await task4.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result4);
        }
        T5 result5;
        try
        {
            result5 = await task5.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result5);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }

        return new(result1, result2, result3, result4, result5);
    }

    public static ValueTaskAwaiter<ValueTuple<T1, T2, T3, T4, T5>> GetAwaiter<T1, T2, T3, T4, T5>(this ValueTuple<ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>> tasks) => WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5).GetAwaiter();
    public static async ValueTask<ValueTuple<T1, T2, T3, T4, T5, T6>> WhenAll<T1, T2, T3, T4, T5, T6>(ValueTask<T1> task1, ValueTask<T2> task2, ValueTask<T3> task3, ValueTask<T4> task4, ValueTask<T5> task5, ValueTask<T6> task6)
    {
        List<Exception>? observedExceptions = null;
        T1 result1;
        try
        {
            result1 = await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result1);
        }
        T2 result2;
        try
        {
            result2 = await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result2);
        }
        T3 result3;
        try
        {
            result3 = await task3.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result3);
        }
        T4 result4;
        try
        {
            result4 = await task4.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result4);
        }
        T5 result5;
        try
        {
            result5 = await task5.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result5);
        }
        T6 result6;
        try
        {
            result6 = await task6.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result6);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }

        return new(result1, result2, result3, result4, result5, result6);
    }

    public static ValueTaskAwaiter<ValueTuple<T1, T2, T3, T4, T5, T6>> GetAwaiter<T1, T2, T3, T4, T5, T6>(this ValueTuple<ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>> tasks) => WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6).GetAwaiter();
    public static async ValueTask<ValueTuple<T1, T2, T3, T4, T5, T6, T7>> WhenAll<T1, T2, T3, T4, T5, T6, T7>(ValueTask<T1> task1, ValueTask<T2> task2, ValueTask<T3> task3, ValueTask<T4> task4, ValueTask<T5> task5, ValueTask<T6> task6, ValueTask<T7> task7)
    {
        List<Exception>? observedExceptions = null;
        T1 result1;
        try
        {
            result1 = await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result1);
        }
        T2 result2;
        try
        {
            result2 = await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result2);
        }
        T3 result3;
        try
        {
            result3 = await task3.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result3);
        }
        T4 result4;
        try
        {
            result4 = await task4.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result4);
        }
        T5 result5;
        try
        {
            result5 = await task5.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result5);
        }
        T6 result6;
        try
        {
            result6 = await task6.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result6);
        }
        T7 result7;
        try
        {
            result7 = await task7.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
            Unsafe.SkipInit(out result7);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }

        return new(result1, result2, result3, result4, result5, result6, result7);
    }

    public static ValueTaskAwaiter<ValueTuple<T1, T2, T3, T4, T5, T6, T7>> GetAwaiter<T1, T2, T3, T4, T5, T6, T7>(this ValueTuple<ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>> tasks) => WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6, tasks.Item7).GetAwaiter();

    private static ValueTask WhenAll(ValueTask task1) => task1;
    private static async ValueTask WhenAll(ValueTask task1, ValueTask task2)
    {
        List<Exception>? observedExceptions = null;
        try
        {
            await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }
    }

    public static ValueTaskAwaiter GetAwaiter(this ValueTuple<ValueTask, ValueTask> tasks) => WhenAll(tasks.Item1, tasks.Item2).GetAwaiter();
    private static async ValueTask WhenAll(ValueTask task1, ValueTask task2, ValueTask task3)
    {
        List<Exception>? observedExceptions = null;
        try
        {
            await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task3.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }
    }

    public static ValueTaskAwaiter GetAwaiter(this ValueTuple<ValueTask, ValueTask, ValueTask> tasks) => WhenAll(tasks.Item1, tasks.Item2, tasks.Item3).GetAwaiter();
    private static async ValueTask WhenAll(ValueTask task1, ValueTask task2, ValueTask task3, ValueTask task4)
    {
        List<Exception>? observedExceptions = null;
        try
        {
            await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task3.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task4.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }
    }

    public static ValueTaskAwaiter GetAwaiter(this ValueTuple<ValueTask, ValueTask, ValueTask, ValueTask> tasks) => WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4).GetAwaiter();
    private static async ValueTask WhenAll(ValueTask task1, ValueTask task2, ValueTask task3, ValueTask task4, ValueTask task5)
    {
        List<Exception>? observedExceptions = null;
        try
        {
            await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task3.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task4.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task5.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }
    }

    public static ValueTaskAwaiter GetAwaiter(this ValueTuple<ValueTask, ValueTask, ValueTask, ValueTask, ValueTask> tasks) => WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5).GetAwaiter();
    private static async ValueTask WhenAll(ValueTask task1, ValueTask task2, ValueTask task3, ValueTask task4, ValueTask task5, ValueTask task6)
    {
        List<Exception>? observedExceptions = null;
        try
        {
            await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task3.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task4.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task5.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task6.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }
    }

    public static ValueTaskAwaiter GetAwaiter(this ValueTuple<ValueTask, ValueTask, ValueTask, ValueTask, ValueTask, ValueTask> tasks) => WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6).GetAwaiter();
    private static async ValueTask WhenAll(ValueTask task1, ValueTask task2, ValueTask task3, ValueTask task4, ValueTask task5, ValueTask task6, ValueTask task7)
    {
        List<Exception>? observedExceptions = null;
        try
        {
            await task1.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task2.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task3.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task4.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task5.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task6.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        try
        {
            await task7.ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            observedExceptions ??= [];
            observedExceptions.Add(ex);
        }
        
        if (observedExceptions is not null)
        {
            throw new AggregateException(observedExceptions);
        }
    }

    public static ValueTaskAwaiter GetAwaiter(this ValueTuple<ValueTask, ValueTask, ValueTask, ValueTask, ValueTask, ValueTask, ValueTask> tasks) => WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6, tasks.Item7).GetAwaiter();

    public readonly struct TupleTaskAwaiter<T1, T2>(ValueTuple<Task<T1>, Task<T2>> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

        public ValueTuple<T1, T2> GetResult()
        {
            _whenAllAwaiter.GetResult();
            return new(tasks.Item1.Result, tasks.Item2.Result);
        }
    }

    public readonly struct TupleConfiguredTaskAwaitable<T1, T2>(ValueTuple<Task<T1>, Task<T2>> tasks, ConfigureAwaitOptions options)
    {
        public Awaiter GetAwaiter() => new(tasks, options);

        public readonly struct Awaiter(ValueTuple<Task<T1>, Task<T2>> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

            public ValueTuple<T1, T2> GetResult()
            {
                _whenAllAwaiter.GetResult();
                return new(tasks.Item1.Result, tasks.Item2.Result);
            }
        }
    }

    public readonly struct TupleTaskAwaiter2(ValueTuple<Task, Task> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
        public void GetResult() => _whenAllAwaiter.GetResult();
    }

    public readonly struct TupleConfiguredTaskAwaitable2(ValueTuple<Task, Task> tasks, ConfigureAwaitOptions options)
    {
        private readonly ValueTuple<Task, Task> _tasks = tasks;
        private readonly ConfigureAwaitOptions _options = options;

        public Awaiter GetAwaiter() => new(_tasks, _options);

        public readonly struct Awaiter(ValueTuple<Task, Task> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
            public void GetResult() => _whenAllAwaiter.GetResult();
        }
    }
    public readonly struct TupleTaskAwaiter<T1, T2, T3>(ValueTuple<Task<T1>, Task<T2>, Task<T3>> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

        public ValueTuple<T1, T2, T3> GetResult()
        {
            _whenAllAwaiter.GetResult();
            return new(tasks.Item1.Result, tasks.Item2.Result, tasks.Item3.Result);
        }
    }

    public readonly struct TupleConfiguredTaskAwaitable<T1, T2, T3>(ValueTuple<Task<T1>, Task<T2>, Task<T3>> tasks, ConfigureAwaitOptions options)
    {
        public Awaiter GetAwaiter() => new(tasks, options);

        public readonly struct Awaiter(ValueTuple<Task<T1>, Task<T2>, Task<T3>> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

            public ValueTuple<T1, T2, T3> GetResult()
            {
                _whenAllAwaiter.GetResult();
                return new(tasks.Item1.Result, tasks.Item2.Result, tasks.Item3.Result);
            }
        }
    }

    public readonly struct TupleTaskAwaiter3(ValueTuple<Task, Task, Task> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
        public void GetResult() => _whenAllAwaiter.GetResult();
    }

    public readonly struct TupleConfiguredTaskAwaitable3(ValueTuple<Task, Task, Task> tasks, ConfigureAwaitOptions options)
    {
        private readonly ValueTuple<Task, Task, Task> _tasks = tasks;
        private readonly ConfigureAwaitOptions _options = options;

        public Awaiter GetAwaiter() => new(_tasks, _options);

        public readonly struct Awaiter(ValueTuple<Task, Task, Task> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
            public void GetResult() => _whenAllAwaiter.GetResult();
        }
    }
    public readonly struct TupleTaskAwaiter<T1, T2, T3, T4>(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

        public ValueTuple<T1, T2, T3, T4> GetResult()
        {
            _whenAllAwaiter.GetResult();
            return new(tasks.Item1.Result, tasks.Item2.Result, tasks.Item3.Result, tasks.Item4.Result);
        }
    }

    public readonly struct TupleConfiguredTaskAwaitable<T1, T2, T3, T4>(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>> tasks, ConfigureAwaitOptions options)
    {
        public Awaiter GetAwaiter() => new(tasks, options);

        public readonly struct Awaiter(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

            public ValueTuple<T1, T2, T3, T4> GetResult()
            {
                _whenAllAwaiter.GetResult();
                return new(tasks.Item1.Result, tasks.Item2.Result, tasks.Item3.Result, tasks.Item4.Result);
            }
        }
    }

    public readonly struct TupleTaskAwaiter4(ValueTuple<Task, Task, Task, Task> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
        public void GetResult() => _whenAllAwaiter.GetResult();
    }

    public readonly struct TupleConfiguredTaskAwaitable4(ValueTuple<Task, Task, Task, Task> tasks, ConfigureAwaitOptions options)
    {
        private readonly ValueTuple<Task, Task, Task, Task> _tasks = tasks;
        private readonly ConfigureAwaitOptions _options = options;

        public Awaiter GetAwaiter() => new(_tasks, _options);

        public readonly struct Awaiter(ValueTuple<Task, Task, Task, Task> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
            public void GetResult() => _whenAllAwaiter.GetResult();
        }
    }
    public readonly struct TupleTaskAwaiter<T1, T2, T3, T4, T5>(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

        public ValueTuple<T1, T2, T3, T4, T5> GetResult()
        {
            _whenAllAwaiter.GetResult();
            return new(tasks.Item1.Result, tasks.Item2.Result, tasks.Item3.Result, tasks.Item4.Result, tasks.Item5.Result);
        }
    }

    public readonly struct TupleConfiguredTaskAwaitable<T1, T2, T3, T4, T5>(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>> tasks, ConfigureAwaitOptions options)
    {
        public Awaiter GetAwaiter() => new(tasks, options);

        public readonly struct Awaiter(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

            public ValueTuple<T1, T2, T3, T4, T5> GetResult()
            {
                _whenAllAwaiter.GetResult();
                return new(tasks.Item1.Result, tasks.Item2.Result, tasks.Item3.Result, tasks.Item4.Result, tasks.Item5.Result);
            }
        }
    }

    public readonly struct TupleTaskAwaiter5(ValueTuple<Task, Task, Task, Task, Task> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
        public void GetResult() => _whenAllAwaiter.GetResult();
    }

    public readonly struct TupleConfiguredTaskAwaitable5(ValueTuple<Task, Task, Task, Task, Task> tasks, ConfigureAwaitOptions options)
    {
        private readonly ValueTuple<Task, Task, Task, Task, Task> _tasks = tasks;
        private readonly ConfigureAwaitOptions _options = options;

        public Awaiter GetAwaiter() => new(_tasks, _options);

        public readonly struct Awaiter(ValueTuple<Task, Task, Task, Task, Task> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
            public void GetResult() => _whenAllAwaiter.GetResult();
        }
    }
    public readonly struct TupleTaskAwaiter<T1, T2, T3, T4, T5, T6>(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

        public ValueTuple<T1, T2, T3, T4, T5, T6> GetResult()
        {
            _whenAllAwaiter.GetResult();
            return new(tasks.Item1.Result, tasks.Item2.Result, tasks.Item3.Result, tasks.Item4.Result, tasks.Item5.Result, tasks.Item6.Result);
        }
    }

    public readonly struct TupleConfiguredTaskAwaitable<T1, T2, T3, T4, T5, T6>(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>> tasks, ConfigureAwaitOptions options)
    {
        public Awaiter GetAwaiter() => new(tasks, options);

        public readonly struct Awaiter(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

            public ValueTuple<T1, T2, T3, T4, T5, T6> GetResult()
            {
                _whenAllAwaiter.GetResult();
                return new(tasks.Item1.Result, tasks.Item2.Result, tasks.Item3.Result, tasks.Item4.Result, tasks.Item5.Result, tasks.Item6.Result);
            }
        }
    }

    public readonly struct TupleTaskAwaiter6(ValueTuple<Task, Task, Task, Task, Task, Task> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
        public void GetResult() => _whenAllAwaiter.GetResult();
    }

    public readonly struct TupleConfiguredTaskAwaitable6(ValueTuple<Task, Task, Task, Task, Task, Task> tasks, ConfigureAwaitOptions options)
    {
        private readonly ValueTuple<Task, Task, Task, Task, Task, Task> _tasks = tasks;
        private readonly ConfigureAwaitOptions _options = options;

        public Awaiter GetAwaiter() => new(_tasks, _options);

        public readonly struct Awaiter(ValueTuple<Task, Task, Task, Task, Task, Task> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
            public void GetResult() => _whenAllAwaiter.GetResult();
        }
    }
    public readonly struct TupleTaskAwaiter<T1, T2, T3, T4, T5, T6, T7>(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6, tasks.Item7).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

        public ValueTuple<T1, T2, T3, T4, T5, T6, T7> GetResult()
        {
            _whenAllAwaiter.GetResult();
            return new(tasks.Item1.Result, tasks.Item2.Result, tasks.Item3.Result, tasks.Item4.Result, tasks.Item5.Result, tasks.Item6.Result, tasks.Item7.Result);
        }
    }

    public readonly struct TupleConfiguredTaskAwaitable<T1, T2, T3, T4, T5, T6, T7>(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>> tasks, ConfigureAwaitOptions options)
    {
        public Awaiter GetAwaiter() => new(tasks, options);

        public readonly struct Awaiter(ValueTuple<Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6, tasks.Item7).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);

            public ValueTuple<T1, T2, T3, T4, T5, T6, T7> GetResult()
            {
                _whenAllAwaiter.GetResult();
                return new(tasks.Item1.Result, tasks.Item2.Result, tasks.Item3.Result, tasks.Item4.Result, tasks.Item5.Result, tasks.Item6.Result, tasks.Item7.Result);
            }
        }
    }

    public readonly struct TupleTaskAwaiter7(ValueTuple<Task, Task, Task, Task, Task, Task, Task> tasks) : ICriticalNotifyCompletion
    {
        private readonly TaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6, tasks.Item7).GetAwaiter();

        public bool IsCompleted => _whenAllAwaiter.IsCompleted;
        public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
        public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
        public void GetResult() => _whenAllAwaiter.GetResult();
    }

    public readonly struct TupleConfiguredTaskAwaitable7(ValueTuple<Task, Task, Task, Task, Task, Task, Task> tasks, ConfigureAwaitOptions options)
    {
        private readonly ValueTuple<Task, Task, Task, Task, Task, Task, Task> _tasks = tasks;
        private readonly ConfigureAwaitOptions _options = options;

        public Awaiter GetAwaiter() => new(_tasks, _options);

        public readonly struct Awaiter(ValueTuple<Task, Task, Task, Task, Task, Task, Task> tasks, ConfigureAwaitOptions options) : ICriticalNotifyCompletion
        {
            private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter = Task.WhenAll(tasks.Item1, tasks.Item2, tasks.Item3, tasks.Item4, tasks.Item5, tasks.Item6, tasks.Item7).ConfigureAwait(options).GetAwaiter();

            public bool IsCompleted => _whenAllAwaiter.IsCompleted;
            public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
            public void UnsafeOnCompleted(Action continuation) => _whenAllAwaiter.UnsafeOnCompleted(continuation);
            public void GetResult() => _whenAllAwaiter.GetResult();
        }
    }
}
