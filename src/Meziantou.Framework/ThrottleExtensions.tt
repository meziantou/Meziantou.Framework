<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<# var count = 11; #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GitVersion
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Threading.Tasks;

namespace Meziantou.Framework
{
    public static class ThrottleExtensions
    {
<# for (int i = 0; i < count; i++) { #>
        public static Action<#= GetTemplateString(i) #> Throttle<#= GetTemplateString(i) #>(this Action<#= GetTemplateString(i) #> action, TimeSpan interval)
        {
            ArgumentNullException.ThrowIfNull(action);

            Task? task = null;
            var l = new object();
<# if (i > 0) { #>
            ValueTuple<#= GetTemplateString(i) #> args = default;
<# } #>
            return (<#= GetTypedArgsString(i, "arg") #>) =>
            {
<# if (i > 0) { #>
                args = ValueTuple.Create(<#= GetArgsString(i, "arg") #>);
<# } #>
                if (task != null)
                    return;

                lock (l)
                {
                    if (task != null)
                        return;
                    
                    task = Task.Delay(interval).ContinueWith(t =>
                    {
                        action(<#= GetArgsString(i, "args.Item") #>);
                        t.Dispose();
                        task = null;
                    }, TaskScheduler.Default);
                }
            };
        }
<# } #>
        private static class ValueTuple
        {
<# for (int i = 1; i < count; i++) { #>
            public static ValueTuple<#= GetTemplateString(i) #> Create<#= GetTemplateString(i) #>(<#= GetTypedArgsString(i, "arg") #>)
            {
                return new ValueTuple<#= GetTemplateString(i) #>(<#= GetArgsString(i, "arg") #>);
            }
<# } #>
        }
<# for (int i = 1; i < count; i++) { #>
        [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
        private readonly struct ValueTuple<#= GetTemplateString(i) #>
        {
<# for (var j = 0; j < i; j++) { #>
            public readonly T<#= j #> Item<#= j #>;
<# } #>
            public ValueTuple(<#= GetTypedArgsString(i, "arg") #>)
            {
<# for (var j = 0; j < i; j++) { #>
                Item<#= j #> = arg<#= j #>;
<# } #>
            }
        }
<# } #>
    }
}
<#+
    string GetTemplateString(int count)
    {
        if (count == 0)
            return "";

        var str = "<";
        for (var i = 0; i < count; i++)
        {
            if (i > 0)
            {
                str += ", ";
            }

            str += "T" + i;
        }
        return str + ">";
    }
    
    string GetArgsString(int count, string name)
    {
        if (count == 0)
            return "";

        var str = "";
        for (var i = 0; i < count; i++)
        {
            if (i > 0)
            {
                str += ", ";
            }

            str += name + i;
        }
        return str;
    }
    
    string GetTypedArgsString(int count, string name)
    {
        if (count == 0)
            return "";

        var str = "";
        for (var i = 0; i < count; i++)
        {
            if (i > 0)
            {
                str += ", ";
            }

            str += "T" + i + " " + name + i;
        }
        return str;
    }
#>